// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Temporal
model MainSettings {
  id               Int    @id @default(autoincrement())
  organizationName String @default("PowerSales")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String
  lastname String
  areaId   String?
  role     Role    @default(editor)

  createdAt       DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?         @default(now()) @db.Timestamp(6)
  isActive        Boolean?          @default(true)
  deletedAt       DateTime?         @db.Timestamp(6)
  UserAction      UserAction[]
  Project         Project[]
  ProjectMember   ProjectMember[]
  ProjectActivity ProjectActivity[]
  area            Area?             @relation(fields: [areaId], references: [id])
}

model UserAction {
  id        Int            @id @default(autoincrement())
  userId    String
  createdAt DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt DateTime?      @default(now()) @db.Timestamp(6)
  deletedAt DateTime?      @db.Timestamp(6)
  type      UserActionTipe

  user User @relation(fields: [userId], references: [id])
}

model ProjectCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  color     Colors    @default(blue)
  Project   Project[]
}

model Project {
  id                 Int             @id @default(autoincrement())
  name               String
  description        String
  startDate          DateTime?       @db.Timestamp(6)
  endDate            DateTime?       @db.Timestamp(6)
  realStartDate      DateTime?       @db.Timestamp(6)
  realEndDate        DateTime?       @db.Timestamp(6)
  progressPercentage Int?            @default(0)
  status             ProjectStatus   @default(pending)
  archived           Boolean?        @default(false)
  createdAt          DateTime?       @default(now()) @db.Timestamp(6)
  completedAt        DateTime?       @db.Timestamp(6)
  updatedAt          DateTime?       @default(now()) @db.Timestamp(6)
  deletedAt          DateTime?       @db.Timestamp(6)
  managerUserId      String
  categoryId         String
  category           ProjectCategory @relation(fields: [categoryId], references: [id])
  manager            User            @relation(fields: [managerUserId], references: [id])
  ProjectMember      ProjectMember[]
  Area               Area?           @relation(fields: [areaId], references: [id])
  areaId             String?
}

model ProjectMember {
  id        String      @id @default(cuid())
  userId    String
  role      ProjectRole @default(member)
  projectId Int
  createdAt DateTime?   @default(now()) @db.Timestamp(6)
  updatedAt DateTime?   @default(now()) @db.Timestamp(6)
  deletedAt DateTime?   @db.Timestamp(6)

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model ProjectActivity {
  id                String           @id @default(cuid())
  title             String
  description       String
  stageId           String
  status            ActivityStatus   @default(pending)
  priority          ActivityPriority @default(medium)
  assignedToUserId  String
  startDate         DateTime?        @db.Timestamp(6)
  endDate           DateTime?        @db.Timestamp(6)
  executedStartDate DateTime?        @db.Timestamp(6)
  executedEndDate   DateTime?        @db.Timestamp(6)

  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  stage          ProjectStage @relation(fields: [stageId], references: [id])
  assignedToUser User         @relation(fields: [assignedToUserId], references: [id])
}

model ProjectStage {
  id            String @id @default(cuid())
  name          String
  description   String
  color         String
  ordinalNumber Int
  projectId     Int

  status          ActivityStatus    @default(pending)
  ProjectActivity ProjectActivity[]
}

model Area {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean?  @default(true)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  Project   Project[]
  User      User[]
}

// Enums

enum ProjectRole {
  manager
  member
}

enum ActivityStatus {
  pending
  in_progress
  review
  completed
}

enum ActivityPriority {
  low
  medium
  high
  critical
}

enum Role {
  editor
  admin
  viewer
  gerente_area
  gerente_general
}

enum UserActionTipe {
  login
  logout
  create_project
}

enum Colors {
  red
  green
  blue
  amber
  violet
  rose
  gray
}

enum ProjectStatus {
  pending
  in_progress
  review
  completed
}
